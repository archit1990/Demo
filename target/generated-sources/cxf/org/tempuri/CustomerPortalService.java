package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2023-12-02T10:38:48.445+05:30
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "CustomerPortalService",
                  wsdlLocation = "file:/C:/Users/N1651861/Downloads/camel-spring-boot-examples-main/camel-spring-boot-examples-main/soap-cxf/src/main/resources/wsdl/GCCustomerPortalService.wsdl",
                  targetNamespace = "http://tempuri.org/")
public class CustomerPortalService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "CustomerPortalService");
    public final static QName BasicHttpBindingICustomerPortalService = new QName("http://tempuri.org/", "BasicHttpBinding_ICustomerPortalService");
    public final static QName GCCustomerPortalServiceCustom = new QName("http://tempuri.org/", "GCCustomerPortalService_Custom");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/N1651861/Downloads/camel-spring-boot-examples-main/camel-spring-boot-examples-main/soap-cxf/src/main/resources/wsdl/GCCustomerPortalService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CustomerPortalService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/N1651861/Downloads/camel-spring-boot-examples-main/camel-spring-boot-examples-main/soap-cxf/src/main/resources/wsdl/GCCustomerPortalService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CustomerPortalService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CustomerPortalService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CustomerPortalService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public CustomerPortalService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CustomerPortalService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CustomerPortalService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ICustomerPortalService
     */
    @WebEndpoint(name = "BasicHttpBinding_ICustomerPortalService")
    public ICustomerPortalService getBasicHttpBindingICustomerPortalService() {
        return super.getPort(BasicHttpBindingICustomerPortalService, ICustomerPortalService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICustomerPortalService
     */
    @WebEndpoint(name = "BasicHttpBinding_ICustomerPortalService")
    public ICustomerPortalService getBasicHttpBindingICustomerPortalService(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingICustomerPortalService, ICustomerPortalService.class, features);
    }


    /**
     *
     * @return
     *     returns ICustomerPortalService
     */
    @WebEndpoint(name = "GCCustomerPortalService_Custom")
    public ICustomerPortalService getGCCustomerPortalServiceCustom() {
        return super.getPort(GCCustomerPortalServiceCustom, ICustomerPortalService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICustomerPortalService
     */
    @WebEndpoint(name = "GCCustomerPortalService_Custom")
    public ICustomerPortalService getGCCustomerPortalServiceCustom(WebServiceFeature... features) {
        return super.getPort(GCCustomerPortalServiceCustom, ICustomerPortalService.class, features);
    }

}
